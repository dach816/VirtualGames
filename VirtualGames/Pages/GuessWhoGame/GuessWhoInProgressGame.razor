@using VirtualGames.Common.Enums
@using VirtualGames.Common.Extensions
@using VirtualGames.Data
@using VirtualGames.Data.GuessWho
@inject GuessWhoService GuessWhoService

<div class="card-header text-center">
    <h1 class="@(IsRed ? "text-danger" : "text-info") text-shadow">@(IsRed ? "Red" : "Blue") Board</h1>
</div>
<div class="card-body text-center">
    @if (_items != null)
    {
        <div class="row">
            @foreach (var item in IsRed ? Game.GetGuessWhoContent().RedBoard : Game.GetGuessWhoContent().BlueBoard)
            {
                <GuessWhoPicture BoardItem="@item" Item="@(_items.FirstOrDefault(i => i.Id == item.ItemId))" OnVisibilityChanged="@(i => BoardItemChanged(i))"/>
            }
        </div>

        <div class="row mt-2">
            <textarea class="col-12" placeholder="Make notes here" rows="5"></textarea>
        </div>

        <h3 class="mt-4">@(IsRed ? "Blue" : "Red") is trying to guess</h3>
        <div class="row justify-content-center">
            @foreach (var item in IsRed ? Game.GetGuessWhoContent().RedChosenItems : Game.GetGuessWhoContent().BlueChosenItems)
            {
                <GuessWhoPicture BoardItem="@item" Item="@(_items.FirstOrDefault(i => i.Id == item.ItemId))"/>
            }
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>
<div class="card-footer text-center">
    <button class="btn btn-success" @onclick="EndGame" disabled="@_buttonsDisabled">End Game</button>
    <button class="btn btn-secondary" @onclick="LeaveGame" disabled="@_buttonsDisabled">Leave Game</button>
</div>

@code {
    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public bool IsRed { get; set; }

    [Parameter]
    public Action OnLeaveGame { get; set; } = () => { };

    private bool _boardChanged;
    private bool _buttonsDisabled;
    private IEnumerable<GuessWhoItem> _items;

    public void BoardItemChanged(GuessWhoBoardItem item)
    {
        var game = Game.GetGuessWhoContent();
        var board = IsRed ? game.RedBoard : game.BlueBoard;
        var boardItem = board.Find(b => b.Id == item.Id);
        if (boardItem == null)
        {
            return;
        }

        boardItem.IsVisible = item.IsVisible;
        Game.GameContent = game;
        _boardChanged = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _items = await GuessWhoService.GetAllCategoryItemsAsync(Game.GetGuessWhoContent().Category);
        _boardChanged = false;
        _buttonsDisabled = false;
        PollForGameUpdate();
    }

    private async Task EndGame()
    {
        _buttonsDisabled = true;
        var guessWhoGame = Game.GetGuessWhoContent();
        guessWhoGame.GameState = GameState.Finished;
        await GuessWhoService.UpdateGameAsync(Game.Id, guessWhoGame);
        OnLeaveGame();
        _buttonsDisabled = false;
    }

    private void LeaveGame()
    {
        _buttonsDisabled = true;
        OnLeaveGame();
        _buttonsDisabled = false;
    }

    private async void PollForGameUpdate()
    {
        var gameContent = Game.GetGuessWhoContent();
        while (gameContent.GameState == GameState.InProgress)
        {
            await Task.Delay(TimeSpan.FromSeconds(2));
            var lastSavedGame = await GuessWhoService.GetGameAsync(Game.Id);
            if (lastSavedGame == null)
            {
                return;
            }

            var lastSavedGameContent = lastSavedGame.GetGuessWhoContent();
            if (gameContent.GameState != GameState.InProgress)
            {
                gameContent.GameState = lastSavedGameContent.GameState;
                Game.GameContent = gameContent;
                StateHasChanged();
                return;
            }

            if (IsRed)
            {
                lastSavedGameContent.RedBoard = gameContent.RedBoard;
            }
            else
            {
                lastSavedGameContent.BlueBoard = gameContent.BlueBoard;
            }

            if (_boardChanged)
            {
                await GuessWhoService.UpdateGameAsync(Game.Id, lastSavedGameContent);
            }

            Game.GameContent = lastSavedGameContent;
            _boardChanged = false;
            StateHasChanged();
        }
    }
}
