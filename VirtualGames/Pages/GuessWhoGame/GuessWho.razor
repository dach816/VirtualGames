@page "/guesswho"
@using VirtualGames.Common
@using VirtualGames.Common.Extensions
@using VirtualGames.Data.GuessWho
@using VirtualGames.Pages.GuessWhoGame
@inject GuessWhoService GuessWhoService

<h1 class="pb-2">Guess Who?</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="card col-12 border @(_isRed.HasValue && _isRed.Value ? "border-danger" : "border-info")">
            @if (!_isRed.HasValue || _game == null || _game.GameState == GameState.NotStarted)
            {
                <div class="card-body text-center">
                    <label class="mx-2">Category:</label>
                    <select class="col-lg-4 col-12" @onchange="@((ChangeEventArgs e) => CategoryChange(e))">
                        @foreach (var category in GuessWhoCategory.Food.ToSelectList())
                        {
                            <option value=@category.Value>@category.Text</option>
                        }
                    </select>
                    <label class="mx-2">Number to guess:</label>
                    <select class="col-lg-4 col-12" @onchange="@((ChangeEventArgs e) => GuessNumChange(e))">
                        <option value=1>1</option>
                        <option value=2>2</option>
                    </select>
                    <div class="row justify-content-center mt-4">
                        <button class="col-lg-4 col-12 btn btn-danger mx-1" @onclick="@(async () => await StartOrJoinGame(true))" disabled="@_startGameDisabled">Start or Join Game as Red!</button>
                        <button class="col-lg-4 col-12 btn btn-info mx-1" @onclick="@(async () => await StartOrJoinGame(false))" disabled="@_startGameDisabled">Start or Join Game as Blue!</button>
                    </div>
                </div>
            }
            else
            {
                <GuessWhoInProgressGame Game="@_game" IsRed="@_isRed.Value" OnLeaveGame="@(() => LeaveGame())"/>
            }
        </div>
    </div>
</div>

@code {
    private GuessWhoGame _game;
    private GuessWhoCategory _category;
    private bool? _isRed;
    private bool _startGameDisabled;
    private int _numGuess = 1;

    protected override void OnInitialized()
    {
        Init();
    }

    private void CategoryChange(ChangeEventArgs e)
    {
        _category = (GuessWhoCategory)int.Parse(e.Value.ToString());
    }

    private void GuessNumChange(ChangeEventArgs e)
    {
        _numGuess = int.Parse(e.Value.ToString());
    }

    private async Task StartOrJoinGame(bool isRed)
    {
        _startGameDisabled = true;
        StateHasChanged();

        _game = await GuessWhoService.GetOrCreateGameAsync(_category, _numGuess);
        _isRed = isRed;
        if (_game.GameState == GameState.NotStarted)
        {
            _game.GameState = GameState.InProgress;
            await GuessWhoService.UpdateGameAsync(_game);
        }

        _startGameDisabled = false;
        _numGuess = _game.NumToGuess;
        StateHasChanged();
    }

    private void LeaveGame()
    {
        Init();
    }

    private void Init()
    {
        _category = GuessWhoCategory.Food;
        _isRed = null;
        _startGameDisabled = false;
        StateHasChanged();
    }
}
