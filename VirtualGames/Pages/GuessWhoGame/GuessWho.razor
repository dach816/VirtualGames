@page "/guesswho"
@using VirtualGames.Common.Enums
@using VirtualGames.Common.Extensions
@using VirtualGames.Data
@using VirtualGames.Data.GuessWho
@using VirtualGames.Pages.GuessWhoGame
@inject GuessWhoService GuessWhoService

<h1 class="pb-2">Guess Who?</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="card col-12 border @(_color.HasValue ? $"border-{_color.GetDescription()}" : "border-secondary")">
            @if (!_color.HasValue || _game == null || _game.GetGuessWhoContent().GameState == GameState.NotStarted)
            {
                <div class="card-body text-center">
                    @if (_inProgressGames != null && _inProgressGames.Any())
                    {
                        <h2>In progress games</h2>
                        @foreach (var game in _inProgressGames)
                        {
                            <div class="row border border-light mx-2 p-2 justify-content-center align-middle">
                                <h4 class="col-12">@(game.GetGuessWhoContent().Category.GetDescription()) Game</h4>
                                <button class="col-lg-3 col-12 btn btn-danger mx-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Red, game.Id))">Join Game as Red!</button>
                                <button class="col-lg-3 col-12 btn btn-info mx-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Blue, game.Id))">Join Game as Blue!</button>
                                @if (game.GetGuessWhoContent().NumPlayers > 2)
                                {
                                    <button class="col-lg-3 col-12 btn btn-success mx-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Green, game.Id))">Join Game as Green!</button>
                                }
                            </div>
                        }

                        <br/>
                    }
                    
                    <h2>New game</h2>
                    <label class="mx-2">Category:</label>
                    <select class="col-lg-4 col-12" @onchange="@(CategoryChange)">
                        @foreach (var category in GuessWhoCategory.Food.ToSelectList())
                        {
                            <option value=@category.Value>@category.Text</option>
                        }
                    </select>

                    <label class="mx-2">Number of players:</label>
                    <select class="col-lg-1 col-12" @onchange="@(NumPlayersChange)">
                        <option value=2>2</option>
                        <option value=3>3</option>
                    </select>

                    <label class="mx-2">Number to guess:</label>
                    <select class="col-lg-1 col-12" @onchange="@(GuessNumChange)">
                        <option value=1>1</option>
                        <option value=2>2</option>
                    </select>

                    <div class="row justify-content-center mt-4">
                        <button class="col-lg-4 col-12 btn btn-danger m-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Red))" disabled="@IsStartGameDisabled(GuessWhoColor.Red)">Start or Join Game as Red!</button>
                        <button class="col-lg-4 col-12 btn btn-info m-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Blue))" disabled="@IsStartGameDisabled(GuessWhoColor.Blue)">Start or Join Game as Blue!</button>
                        <button class="col-lg-4 col-12 btn btn-success m-1" @onclick="@(async () => await StartOrJoinGame(GuessWhoColor.Green))" disabled="@IsStartGameDisabled(GuessWhoColor.Green)">Start or Join Game as Green!</button>
                    </div>
                </div>
            }
            else
            {
                <GuessWhoInProgressGame Game="@_game" Color="@_color.Value" NumPlayers="@_numPlayers" OnLeaveGame="@(() => LeaveGame())"/>
            }
        </div>
    </div>
</div>

@code {
    private Game _game;
    private GuessWhoCategory _category;
    private GuessWhoColor? _color;
    private int _numPlayers = 2;
    private bool _startGameDisabled;
    private int _numGuess = 1;
    private IEnumerable<Game> _inProgressGames;

    protected override async Task OnInitializedAsync()
    {
        await InitAsync();
    }

    private void CategoryChange(ChangeEventArgs e)
    {
        _category = (GuessWhoCategory)int.Parse(e.Value.ToString());
    }

    private void GuessNumChange(ChangeEventArgs e)
    {
        _numGuess = int.Parse(e.Value.ToString());
    }

    private void NumPlayersChange(ChangeEventArgs e)
    {
        _numPlayers = int.Parse(e.Value.ToString());
    }

    private async Task StartOrJoinGame(GuessWhoColor color, string gameId = null)
    {
        _startGameDisabled = true;
        StateHasChanged();

        _game = gameId == null ? await GuessWhoService.GetOrCreateGameAsync(_category, _numGuess, _numPlayers) : await GuessWhoService.GetGameAsync(gameId);
        var guessWhoGame = _game.GetGuessWhoContent();
        _color = color;
        if (guessWhoGame.GameState == GameState.NotStarted)
        {
            guessWhoGame.GameState = GameState.InProgress;
            _game.GameContent = guessWhoGame;
            await GuessWhoService.UpdateGameAsync(_game.Id, guessWhoGame);
        }

        _startGameDisabled = false;
        _numGuess = guessWhoGame.NumToGuess;
        StateHasChanged();
    }

    private async void LeaveGame()
    {
        await InitAsync();
    }

    private async Task InitAsync()
    {
        _inProgressGames = await GuessWhoService.GetAllGamesAsync();
        _category = GuessWhoCategory.Food;
        _color = null;
        _startGameDisabled = false;
        _numGuess = 1;
        _numPlayers = 2;
        StateHasChanged();
    }

    private bool IsStartGameDisabled(GuessWhoColor color)
    {
        if (_startGameDisabled){
            return true;
        }

        if (_numPlayers == 2 && color == GuessWhoColor.Green)
        {
            return true;
        }

        return false;
    } 
}
