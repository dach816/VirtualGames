@using VirtualGames.Common.Enums
@using VirtualGames.Data
@using VirtualGames.Data.Boggle
@inject BoggleService Service

<div class="card-body text-center">
    @if (Game?.GetContentAs<BoggleGame>()?.Letters != null)
    {
        <div class="offset-2 col-8">
            @foreach (var letterRow in GetLetterRows())
            {
                <div class="row justify-content-center">
                    @foreach (var letter in letterRow)
                    {
                        <div class="col-3 border @(_timer.TotalSeconds <= 0 ? "border-danger" : "border-light")">
                            <BoggleDieComponent Letter="@letter" />
                        </div>
                    }
                </div>
            }
        </div>
        <div class="row justify-content-center">
            <div class="col-lg-4 col-12 mt-2">Time left: @_timer.ToString(@"mm\:ss")</div>
        </div>
        <div class="row justify-content-center">
            @if (_timer.TotalSeconds <= 0)
            {
                <h2 class="col-lg-4 col-12 text-danger">Time's up!</h2>
            }
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
    
    <div class="row mt-2">
        <textarea class="col-12" placeholder="Write words here..." rows="5"></textarea>
    </div>
</div>
<div class="card-footer text-center">
    <button class="btn btn-success" @onclick="EndGame" disabled="@_buttonsDisabled">End Game</button>
</div>

@code {
    private bool _buttonsDisabled;
    private TimeSpan _timer;

    [Parameter]
    public Game Game { get; set; }

    [Parameter]
    public Action OnLeaveGame { get; set; } = () => { };

    protected override void OnInitialized()
    {
        var gameContent = Game.GetContentAs<BoggleGame>();
        _buttonsDisabled = false;
        _timer = TimeSpan.FromMinutes(2).Subtract(DateTime.UtcNow.Subtract(gameContent.StartTimestamp));
        if (_timer.TotalSeconds < 0)
        {
            _timer = TimeSpan.Zero;
        }

        CountDown();
    }

    private async Task EndGame()
    {
        _buttonsDisabled = true;
        var boggleGame = Game.GetContentAs<BoggleGame>();
        boggleGame.GameState = GameState.Finished;
        await Service.UpdateGameAsync(Game.Id, boggleGame);
        OnLeaveGame();
        _buttonsDisabled = false;
    }

    async void CountDown()
    {
        var lastSavedGame = await Service.GetGameAsync(Game.Id);
        if (lastSavedGame == null)
        {
            return;
        }

        while (_timer.TotalSeconds > 0)
        {
            lastSavedGame = await Service.GetGameAsync(Game.Id);
            if (lastSavedGame == null)
            {
                return;
            }

            var savedGameContent = lastSavedGame.GetContentAs<BoggleGame>();
            if (savedGameContent.GameState == GameState.Finished)
            {
                break;
            }


            await Task.Delay(TimeSpan.FromSeconds(1));
            _timer = _timer.Add(new TimeSpan(0, 0, 0, -1));
            StateHasChanged();
        }

        StateHasChanged();
    }

    IEnumerable<IEnumerable<string>> GetLetterRows()
    {
        var letters = Game.GetContentAs<BoggleGame>().Letters;
        var row1 = letters.Take(4);
        var row2 = letters.Skip(4).Take(4);
        var row3 = letters.Skip(8).Take(4);
        var row4 = letters.Skip(12);
        return new List<IEnumerable<string>>
        {
            row1,
            row2,
            row3,
            row4
        };
    }
}
