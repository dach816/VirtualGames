@page "/password"
@using VirtualGames.Common

<h1>Password</h1>

@if (_gameState == GameState.NotStarted)
{
    <button class="btn btn-primary" @onclick="StartGame">Start game!</button>
}
else if (_gameState == GameState.InProgress)
{
    <h4>Your super secret word is: <i>@_currentWord</i></h4>
    <p>Time left: @_timer.ToString(@"mm\:ss")</p>
    <p>Number correct: @_numCorrect</p>
    <p>Words left: @(_words.Count + 1)</p>
    <button class="btn btn-success" @onclick="CorrectGuess">Correct guess!</button>
    <button class="btn btn-danger" @onclick="Taboo">I said the word!</button>
    <button class="btn btn-secondary" @onclick="Pass">Pass!</button>
}
else
{
    <p>You got @_numCorrect words right out of @_totalWords!</p>
    <button class="btn btn-primary" @onclick="StartGame">New game!</button>
}

@code {
    private string _currentWord;
    private TimeSpan _timer;
    private int _numCorrect;
    private int _totalWords;
    private GameState _gameState;
    private Queue<string> _words;

    private void StartGame()
    {
        _words = new Queue<string>(new List<string> { "Test", "Something", "Hello", "Dog", "Sunrise", "Night", "Sometime" });
        _totalWords = _words.Count;
        _numCorrect = 0;
        _currentWord = _words.Dequeue();
        _timer = TimeSpan.FromMinutes(2);
        _gameState = GameState.InProgress;
        CountDown();
    }

    private void CorrectGuess()
    {
        _numCorrect++;

        if (_words.Count == 0)
        {
            _timer = TimeSpan.Zero;
            return;
        }

        _currentWord = _words.Dequeue();
    }

    private void Pass()
    {
        _words.Enqueue(_currentWord);
        _currentWord = _words.Dequeue();
    }

    private void Taboo()
    {
        _currentWord = _words.Dequeue();
    }

    async void CountDown()
    {
        while (_timer.TotalSeconds > 0)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));
            _timer = _timer.Add(new TimeSpan(0, 0, 0, -1));
            StateHasChanged();
        }

        _gameState = GameState.Finished;
        StateHasChanged();
    }
}
