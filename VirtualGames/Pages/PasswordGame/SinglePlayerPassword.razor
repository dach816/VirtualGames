@page "/password-single"
@using VirtualGames.Common
@using VirtualGames.Common.Enums
@using VirtualGames.Data.Password
@inject PasswordService PasswordService

<h1 class="pb-2">Password</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="card col-10 border border-primary">
            @if (_gameState == GameState.NotStarted)
            {
                <div class="card-body text-center">
                    <h3>Let's start a new game!</h3>
                    <button class="btn btn-primary mt-4" @onclick="@(async () => await StartGameAsync())" disabled="@_startGameDisabled">Start game!</button>
                </div>
            }
            else if (_gameState == GameState.InProgress)
            {
                <div class="card-header text-center">
                    <h2>Your super secret password is:</h2>
                </div>
                <div class="card-body text-center">
                    <div class="display-4">
                        <i>@_currentWord</i>
                    </div>

                    <div class="row pt-5">
                        <div class="col-lg-4 col-sm-12">Time left: @_timer.ToString(@"mm\:ss")</div>
                        <div class="col-lg-4 col-sm-12">Number correct: @_numCorrect</div>
                        <div class="col-lg-4 col-sm-12">Passwords left: @(_words.Count + 1)</div>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-success col-lg-3 col-sm-12" @onclick="CorrectGuess" disabled="@_correctPasswordDisabled">Correct guess!</button>
                    <button class="btn btn-danger col-lg-3 col-sm-12" @onclick="Taboo" disabled="@_tabooDisabled">I said the password!</button>
                    <button class="btn btn-secondary col-lg-3 col-sm-12" @onclick="Pass" disabled="@_passDisabled">Pass!</button>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3>You got @_numCorrect passwords right out of @_totalWords!</h3>
                    <button class="btn btn-primary mt-4" @onclick="@(async () => await StartGameAsync())" disabled="@_startGameDisabled">New game!</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _currentWord;
    private TimeSpan _timer;
    private int _numCorrect;
    private int _totalWords;
    private GameState _gameState;
    private Queue<string> _words;

    private bool _startGameDisabled;
    private bool _correctPasswordDisabled;
    private bool _passDisabled;
    private bool _tabooDisabled;

    private async Task StartGameAsync()
    {
        _startGameDisabled = true;
        _words = new Queue<string>(await PasswordService.GetPasswordsForGameAsync());
        _totalWords = _words.Count;
        _numCorrect = 0;
        _currentWord = _words.Dequeue();
        _timer = TimeSpan.FromMinutes(2);
        _gameState = GameState.InProgress;
        _startGameDisabled = false;
        _correctPasswordDisabled = false;
        _passDisabled = false;
        _tabooDisabled = false;
        CountDown();
    }

    private void CorrectGuess()
    {
        _correctPasswordDisabled = true;
        _numCorrect++;

        if (_words.Count == 0)
        {
            _timer = TimeSpan.Zero;
            return;
        }

        _currentWord = _words.Dequeue();
        _correctPasswordDisabled = false;
    }

    private void Pass()
    {
        _passDisabled = true;
        _words.Enqueue(_currentWord);
        _currentWord = _words.Dequeue();
        _passDisabled = false;
    }

    private void Taboo()
    {
        _tabooDisabled = true;
        _currentWord = _words.Dequeue();
        _tabooDisabled = false;
    }

    async void CountDown()
    {
        while (_timer.TotalSeconds > 0)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));
            _timer = _timer.Add(new TimeSpan(0, 0, 0, -1));
            StateHasChanged();
        }

        _gameState = GameState.Finished;
        StateHasChanged();
    }

}