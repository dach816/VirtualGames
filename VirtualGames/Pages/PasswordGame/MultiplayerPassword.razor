@page "/password-multi"
@using VirtualGames.Common.Enums
@using VirtualGames.Data.Password
@inject PasswordService PasswordService

<h1 class="pb-2">Password</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="card col-10 border border-primary">
            @if (_game == null || _game.GameState == GameState.NotStarted)
            {
                <div class="card-body text-center">
                    <h3>Let's start a new game!</h3>
                    <button class="btn btn-primary mt-4" @onclick="@(async () => await StartGameAsync())" disabled="@_startGameDisabled">Start game!</button>
                </div>
            }
            else if (_game.GameState == GameState.InProgress)
            {
                <div class="card-header text-center">
                    <h2>Your super secret password is:</h2>
                </div>
                <div class="card-body text-center">
                    <div class="display-4">
                        <i>@_game.CurrentWord</i>
                    </div>

                    <div class="row pt-5">
                        <div class="col-lg-4 col-sm-12">Red points: @_game.RedPoints</div>
                        <div class="col-lg-4 col-sm-12">Blue points: @_game.BluePoints</div>
                        <div class="col-lg-4 col-sm-12">Passwords left: @(_words.Count + 1)</div>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-danger col-lg-3 col-sm-12" @onclick="RedPoint" disabled="@_redPointDisabled">Red point!</button>
                    <button class="btn btn-info col-lg-3 col-sm-12" @onclick="BluePoint" disabled="@_bluePointDisabled">Blue point!</button>
                </div>
            }
            else
            {
                <div class="card-body text-center">
                    <h3>Red: @_game.RedPoints</h3>
                    <h3>Blue: @_game.BluePoints</h3>
                    <button class="btn btn-primary mt-4" @onclick="@(async () => await StartGameAsync())" disabled="@_startGameDisabled">New game!</button>
                    <button class="btn btn-secondary mt-4" @onclick="@(async () => await JoinGameAsync())" disabled="@_startGameDisabled">Join game!</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Queue<string> _words;
    private PasswordGame _game;
    private string _gameId;

    private bool _startGameDisabled;
    private bool _redPointDisabled;
    private bool _bluePointDisabled;

    protected override async Task OnInitializedAsync()
    {
        await JoinGameAsync();
    }

    private async Task StartGameAsync()
    {
        _startGameDisabled = true;
        var game = await PasswordService.GetOrCreateGameAsync();
        _gameId = game.Id;
        _game = game.GetContentAs<PasswordGame>();
        _words = new Queue<string>(_game.Passwords);
        _game.CurrentWord = _words.Dequeue();
        _game.GameState = GameState.InProgress;
        _startGameDisabled = false;
        _redPointDisabled = false;
        _bluePointDisabled = false;
        UpdateGameAsync();
        PollForGameUpdate();
    }

    private async Task JoinGameAsync()
    {
        _startGameDisabled = true;
        var game = await PasswordService.GetCurrentGame();
        if (game != null)
        {
            _gameId = game.Id;
            _game = game.GetContentAs<PasswordGame>();
            _words = new Queue<string>(_game.Passwords);
            PollForGameUpdate();
        }
        _startGameDisabled = false;
        _redPointDisabled = false;
        _bluePointDisabled = false;
    }

    private void RedPoint()
    {
        _redPointDisabled = true;
        _game.RedPoints++;

        if (_words.Count == 0)
        {
            _game.GameState = GameState.Finished;
            UpdateGameAsync();
            return;
        }

        _game.CurrentWord = _words.Dequeue();
        _redPointDisabled = false;
        UpdateGameAsync();
    }

    private void BluePoint()
    {
        _bluePointDisabled = true;
        _game.BluePoints++;

        if (_words.Count == 0)
        {
            _game.GameState = GameState.Finished;
            UpdateGameAsync();
            return;
        }

        _game.CurrentWord = _words.Dequeue();
        _bluePointDisabled = false;
        UpdateGameAsync();
    }

    private async void UpdateGameAsync()
    {
        _game.Passwords = _words.ToList();
        await PasswordService.UpdateGameAsync(_gameId, _game);
    }

    private async void PollForGameUpdate()
    {
        while (_game.GameState == GameState.InProgress)
        {
            await Task.Delay(TimeSpan.FromSeconds(1));
            var game = await PasswordService.GetCurrentGame();
            var gameContent = game.GetContentAs<PasswordGame>();
            if (gameContent.StartTimestamp != _game.StartTimestamp
                || gameContent.RedPoints != _game.RedPoints
                || gameContent.BluePoints != _game.BluePoints
                || gameContent.Passwords != _game.Passwords)
            {
                _game = gameContent;
                _gameId = game.Id;
                _words = new Queue<string>(_game.Passwords);
            }

            StateHasChanged();
        }
    }
}
