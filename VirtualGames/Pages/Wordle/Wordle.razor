@using VirtualGames.Data
@using VirtualGames.Data.Wordle
@page "/wordle"
@inject WordleService WordleService

<h1 class="pb-2">Guess Who?</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="card col-10 border border-success">
            <div class="card-body text-center">
                <div class="row justify-content-center">
                    @foreach (var keyboardLetter in _keyboard.Where(k => k.Index <= 9))
                    {
                        <button class="col-1 m-1 btn btn-@(StatusToColor(keyboardLetter.Status))" disabled=@IsLetterDisabled(keyboardLetter)>@keyboardLetter.Letter</button>
                    }
                </div>
                <div class="row justify-content-center">
                    @foreach (var keyboardLetter in _keyboard.Where(k => 10 <= k.Index && k.Index <= 18))
                    {
                        <button class="col-1 mx-1 btn btn-@(StatusToColor(keyboardLetter.Status))" disabled=@IsLetterDisabled(keyboardLetter)>@keyboardLetter.Letter</button>
                    }
                </div>
                <div class="row justify-content-center">
                    @foreach (var keyboardLetter in _keyboard.Where(k => k.Index >= 19))
                    {
                        <button class="col-1 m-1 btn btn-@(StatusToColor(keyboardLetter.Status))" disabled=@IsLetterDisabled(keyboardLetter)>@keyboardLetter.Letter</button>
                    }
                </div>
                <div class="row justify-content-center">
                    <button class="col-2 m-1 btn btn-light" disabled=@IsEnterDisabled()>Enter</button>
                    <button class="col-2 m-1 btn btn-light">Del</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Game _game;

    private List<WordleLetter> _currentGuess;

    private List<WordleGuessWord> _guesses;

    private WordleWord _wordToGuess;

    private List<WordleLetter> _keyboard = new List<WordleLetter> {
            new WordleLetter { Letter = 'Q', Index = 0 },
            new WordleLetter { Letter = 'W', Index = 1 },
            new WordleLetter { Letter = 'E', Index = 2 },
            new WordleLetter { Letter = 'R', Index = 3, Status = WordleLetterStatus.NotInWord },
            new WordleLetter { Letter = 'T', Index = 4 },
            new WordleLetter { Letter = 'Y', Index = 5 },
            new WordleLetter { Letter = 'U', Index = 6 },
            new WordleLetter { Letter = 'I', Index = 7 },
            new WordleLetter { Letter = 'O', Index = 8 },
            new WordleLetter { Letter = 'P', Index = 9 },
            new WordleLetter { Letter = 'A', Index = 10 },
            new WordleLetter { Letter = 'S', Index = 11 },
            new WordleLetter { Letter = 'D', Index = 12, Status = WordleLetterStatus.InWordWrongIndex },
            new WordleLetter { Letter = 'F', Index = 13 },
            new WordleLetter { Letter = 'G', Index = 14 },
            new WordleLetter { Letter = 'H', Index = 15 },
            new WordleLetter { Letter = 'J', Index = 16 },
            new WordleLetter { Letter = 'K', Index = 17 },
            new WordleLetter { Letter = 'L', Index = 18 },
            new WordleLetter { Letter = 'Z', Index = 19 },
            new WordleLetter { Letter = 'X', Index = 20, Status = WordleLetterStatus.InWordRightIndex },
            new WordleLetter { Letter = 'C', Index = 21 },
            new WordleLetter { Letter = 'V', Index = 22 },
            new WordleLetter { Letter = 'B', Index = 23 },
            new WordleLetter { Letter = 'N', Index = 24 },
            new WordleLetter { Letter = 'M', Index = 25 }
        };

    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _guesses = new List<WordleGuessWord>();
        _currentGuess = new List<WordleLetter>();
        _errorMessage = string.Empty;
            
        try {
            _game = await WordleService.CreateGameAsync(5);
            var gameContent = _game.GetContentAs<WordleGame>();
            _wordToGuess = gameContent.WordToGuess;
            StateHasChanged();
        } catch (ArgumentException ex) {
            Error(ex.Message);
        }
    }

    private void Error(string message)
    {
        _errorMessage = message;
        StateHasChanged();
    }

    private void Guess(string guessWord)
    {
        var guess = WordleService.GuessWord(_wordToGuess, guessWord.ToUpper());
        _guesses.Add(guess);
        foreach(var letter in guess.Letters)
        {
            var keyboardLetter = _keyboard.FirstOrDefault(k => k.Letter == letter.Letter);
            if (keyboardLetter == null)
            {
                continue;
            }

            keyboardLetter.Status = letter.Status;
        }

        StateHasChanged();
    }

    private string StatusToColor(WordleLetterStatus? status)
    {
        return status switch {
            WordleLetterStatus.InWordWrongIndex => "danger",
            WordleLetterStatus.InWordRightIndex => "success",
            WordleLetterStatus.NotInWord => "dark",
            _ => "secondary"
        };
    }

    private bool IsLetterDisabled(WordleLetter letter)
    {
        return letter.Status == WordleLetterStatus.NotInWord;
    }

    private bool IsEnterDisabled()
    {
        return _currentGuess.Count != 5;
    }
}